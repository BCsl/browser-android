import com.cliqz.minibloomfilter.BloomFilter

import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'com.github.cliqz-oss:minibloomfilter:1.0'
    }
}

def props = project.properties.withDefault { "" }

// Release sginature configuration if we have the environment correctly setted
if (project.hasProperty('Browser.storeFile')) {
    android {
        signingConfigs {
            release {
                storeFile file(props['Browser.storeFile'])
                storePassword props['Browser.storePassword']
                keyAlias props['Browser.keyAlias']
                keyPassword props['Browser.keyPassword']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
}

def extPath = file('../external/extension')
def downloadFile = new File(extPath, '.download')
def extZip = new File(extPath, 'extension_latest.zip')

def createBloomFilter(File outputDir) {
    def blackList = new File('app/blacklist.txt')
    def lineCount = 0;
    blackList.eachLine { line ->
        lineCount++;
    }
    def bloomFilter = BloomFilter.create(lineCount, 0.00001)
    blackList.eachLine { line ->
        bloomFilter.put(line.substring(0, line.indexOf("\t")));
    }
    new File(outputDir.absolutePath+"/bloomfilter.data").withObjectOutputStream { stream ->
        stream.writeObject(bloomFilter)
    }
}

def compileAdHostsList(File outputDir) {
    File parent = project.buildscript.sourceFile.parentFile
    File adFile = new File(parent, 'ad_servers.txt')
    // Pattern p = ~/((([1-2]\d\d)|([1-9]\d)|(\d))\.?){4}\s+([^(localhost)].*)/
    Pattern p = ~/^127\.0\.0\.1\s((localhost.*)|(.*))/
    new File(outputDir, 'adhosts.txt').withWriter { writer ->
        adFile.eachLine { line ->
            Matcher matcher = p.matcher(line)
            if (matcher.matches()) {
                def host = matcher.group(3)
                if (host != null) {
                  writer.println(host)
                }
            }
        }
    }
}

afterEvaluate { project ->
    project.tasks.each { tazk ->
        if (tazk.name =~ /mergeXwalk.*Assets/ && !tazk.name.endsWith('TestAssets')) {
            tazk << {
                compileAdHostsList(tazk.outputDir)
            }
        }
        if (tazk.name =~ /merge.*Assets/ && !tazk.name.endsWith('TestAssets')) {
            tazk << {
                createBloomFilter(tazk.outputDir)
            }
        }
    }
}

// Default configuration for GCM (via Amazon SNS) and debug signing
android {
    def topics = props["Browser.topicARNs"].tokenize(',').collect { "\"${it}\"" }.join(',')

    defaultConfig {
        buildConfigField 'String', 'APPLICATION_ARN', "\"${props['Browser.applicationARN']}\""
        buildConfigField 'String[]', 'TOPIC_ARNS', "new String[] { ${topics} }"
        buildConfigField 'String', 'AMAZON_ACCOUNT_ID', "\"${props['Browser.amazonAccountID']}\""
        buildConfigField 'String', 'AMAZON_IDENTITY_POOL_ID', "\"${props['Browser.amazonIdentityPoolID']}\""
        buildConfigField 'String', 'AMAZON_UNAUTH_ROLE_ARN', "\"${props['Browser.amazonUnauthRoleARN']}\""
        buildConfigField 'String', 'AMAZON_AUTH_ROLE_ARN', "\"${props['Browser.amazonAuthRoleARN']}\""
        buildConfigField 'String', 'LOOKBACK_SDK_TOKEN', "\"${props['Browser.lookbackSdkToken']}\""
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'debug'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
    }
}
