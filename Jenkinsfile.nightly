#!/bin/env groovy

node('master') {
    def imageName = 'android-browser'

    stage('Checkout') {
        checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            extensions: scm.extensions + [
                [$class: 'CheckoutOption', timeout: 30],
                [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: true, timeout: 30, honorRefspec: true],
            ],
            userRemoteConfigs: scm.userRemoteConfigs
        ])
    }

    stage('Build docker image') {
        docker.build(imageName, '--build-arg UID=`id -u` --build-arg GID=`id -g` .')
    }

    docker.image(imageName).inside() {
        stage('Install node dependencies') {
            sh '''#!/bin/bash -l
                set -x
                set -e
                yarn
            '''
        }

        stage('Build react-native bundle') {
            sh '''#!/bin/bash -l
                set -x
                set -e
                npm run bundle
            '''
        }

        withEnv(['GRADLE_USER_HOME=${pwd()}/gradle_home']) {
            stage('Clean') {
                sh './gradlew clean'
            }

            stage('Compile') {
                sh '''#!/bin/bash -l
                    set -x
                    set -e
                    ./gradlew --stacktrace assembleStandardFatDebug
                '''
            }
        }
    }

    def id = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

    stage('Upload') {
        withCredentials([
            [
                $class: 'UsernamePasswordMultiBinding',
                credentialsId: 'f1732e5f-3e84-47ad-9286-a5fa6657ec43',
                passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                usernameVariable: 'AWS_ACCESS_KEY_ID',
            ]
        ]) {
            def s3Path = 's3://repository.cliqz.com/dist/android/nightly'
            def apkPathDebug = "app/build/outputs/apk/standardFat/debug/app-standard-fat-debug.apk"
//            def apkPathRelease = "app/build/outputs/apk/standardFat/release/app-standard-fat-release.apk"
            sh "aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkPathDebug} ${s3Path}/${id}.apk"
//            sh "aws s3 cp --acl public-read --acl bucket-owner-full-control ${s3Path}/${id}.apk ${s3Path}/latestRelease.apk"
            sh "aws s3 cp --acl public-read --acl bucket-owner-full-control ${apkPathDebug} ${s3Path}/latest.apk"
       }
    }

    stage('JIRA'){
        withEnv(['JIRA_SITE=cliqztix']){
            def list1 =getIssueList()
            def transitionInput = [
                    transition: [
                            id: '121'
                    ]
            ]
            for (element in list1){
                try{
                    def issue = jiraGetIssue idOrKey: element
                    if(issue.data.fields.status.name == "Resolved"){
                        jiraTransitionIssue idOrKey: element, input: transitionInput
                        echo "Transistioned ${element}"
                    }
                }
                catch (Error e){
                    echo e
                }
            }
        }
    }

    stage('Send email') {
        def bodytxt = '$PROJECT_NAME - Build # $BUILD_NUMBER'
        bodytxt += '\n\nCheck console output at http://magrathea:8080/job/' + env.JOB_NAME + '/' + env.BUILD_NUMBER + '/ to view the results.'
        bodytxt += '\n\nUploaded to: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/' + id + '.apk\n\n'
//        bodytxt += '\n\nLatest Release Build: http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/latestRelease.apk'
        bodytxt += '\n\nLatest Debug Build (For Telemetry): http://repository.cliqz.com.s3.amazonaws.com/dist/android/nightly/latest.apk'
        bodytxt += '\n\n\n\n\n $CHANGES_SINCE_LAST_SUCCESS'

        emailext(
            to: 'androiddev@cliqz.com',
            subject: '$PROJECT_NAME - Build # $BUILD_NUMBER',
            body: bodytxt
        )
    }
}

@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""
    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
        }
    }
    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

@NonCPS
def getIssueList(){
    def list =[]
    def changes = getChangeString()
    def re = /AB-([0-9])*/
    def y = changes =~ re
    while (y){
        list.add(y.group().toString())
    }
    return list
}
